

# include <stdio.h>
# include <conio.h>
# include <stdlib.h>

typedef struct tree {
   int data;
   struct tree *left, *right;
} node;

node *init_node() {
   node *temp;
   temp = (node *) malloc(sizeof(node));
   temp->left = NULL;
   temp->right = NULL;
   return temp;
}

void insert(node *root, node *new_node) {
   if (new_node->data < root->data) {
      if (root->left == NULL)
         root->left = new_node;
      else
         insert(root->left, new_node);
   }

   if (new_node->data > root->data) {
      if (root->right == NULL)
         root->right = new_node;
      else
         insert(root->right, new_node);
   }
}

node *search(node *root, int key, node **parent) {
   node *temp;
   temp = root;
   while (temp != NULL) {
      if (temp->data == key) {
         printf("\nThe %d Element is Present", temp->data);
         return temp;
      }
      *parent = temp;

      if (temp->data > key)
         temp = temp->left;
      else
         temp = temp->right;
   }
   return NULL;
}

void inorder(node *temp) {
   if (temp != NULL) {
      inorder(temp->left);
      printf("%d", temp->data);
      inorder(temp->right);
   }
}

void preorder(node *temp) {
   if (temp != NULL) {
      printf("%d", temp->data);
      preorder(temp->left);
      preorder(temp->right);
   }
}

void postorder(node *temp) {
   if (temp != NULL) {
      postorder(temp->left);
      postorder(temp->right);
      printf("%d", temp->data);
   }
}

int main() {
   int pilih;
   char ans = 'N';
   int key;
   node *new_node, *root, *tmp, *parent;
   node *init_node();
   root = NULL;

   printf("\nProgram For Binary Search Tree ");
   do {
      printf("\n1.Create");
      printf("\n2.Search");
      printf("\n3.Recursive Traversals");
      printf("\n4.Exit");
      printf("\nEnter your choice :");
      scanf("%d", &pilih);

      switch (pilih) {
      case 1:
         do {
            new_node = init_node();
            printf("\nEnter The Element ");
            scanf("%d", &new_node->data);

            if (root == NULL) /* Tree is not Created */
               root = new_node;
            else
               insert(root, new_node);

            printf("\nWant To enter More Elements?(y/n)");
            ans = getch();
         } while (ans == 'y');
         break;

      case 2:
         printf("\nEnter Element to be searched :");
         scanf("%d", &key);

         tmp = search(root, key, &parent);
         printf("\nParent of node %d is %d", tmp->data, parent->data);
         break;

      case 3:
         if (root == NULL)
            printf("Tree Is Not Created");
         else {
            printf("\nThe Inorder display : ");
            inorder(root);
            printf("\nThe Preorder display : ");
            preorder(root);
            printf("\nThe Postorder display : ");
            postorder(root);
         }
         break;
      }
   } while (pilih != 4);
}


